pipeline {

    agent any
    
    parameters {
        choice(name: 'STAGE', choices: ['Build & Deploy', 'Pull & Test', 'Manually'], description: 'Select the stage to run')
        // booleanParam(name: 'MANUAL_TRIGGER', defaultValue: false, description: 'Trigger the build manually')
    }
    
    triggers {
        pollSCM('H/5 * * * *') // Poll SCM every 5 minutes for changes
    }

    environment {
        AWS_REGION = 'us-east-1'
        S3_BUCKET = 'itaynave-task-s3'
        ECR_REPOSITORY = '161192472568.dkr.ecr.us-east-1.amazonaws.com/itaynave-task-ecr'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key-id')
    }
    
    stages {
        stage('Build & Deploy') {
            when {
                anyOf {
                    changeRequest()
                    expression { params.STAGE == 'Build & Deploy' }
                    expression { params.STAGE == 'Manually' } 
                }
            }
            steps {
                checkout scm
                script {
                    sh 'sudo chmod 666 /var/run/docker.sock'
                    dir('scripts') {
                        sh 'mkdir -p artifacts'  // Create the artifacts directory if it doesn't exist
                        sh 'docker build -t ${ECR_REPOSITORY}:latest .'
                        sh 'docker run --rm -v ${PWD}/artifacts:/artifacts ${ECR_REPOSITORY}:latest'

                        withAWS(region: "${AWS_REGION}", credentials: 'candidate-iam') {
                            // Authenticate with ECR
                            sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin 161192472568.dkr.ecr.us-east-1.amazonaws.com'
                    
                            // Push the Docker image to ECR
                            sh 'docker push ${ECR_REPOSITORY}:latest'
                    
                            // Upload the artifact to S3
                            s3Upload(bucket: "${S3_BUCKET}", file: 'artifacts/artifact-latest.txt')
                        }
                    }
                }
            }
        }
        stage('Pull & Test') {
            when {
                anyOf {
                    expression { params.STAGE == 'Pull & Test' }
                    expression { params.STAGE == 'Manually' }
                }
            }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'candidate-iam') {
                    // Download the specific artifact file from S3
                    s3Download(bucket: "${S3_BUCKET}", file: 'artifact-latest.txt', path: 'artifact-latest.txt', force: true)
            
                    // Check if the artifact is empty
                    script {
                        def artifactContent = readFile('artifact-latest.txt').trim()
                        if (artifactContent.isEmpty()) {
                            error('Artifact is empty')
                        } else {
                            echo 'Artifact is not empty'
                        }
                    }
                }   
            }
        }
    }


}
